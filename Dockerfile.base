# This Dockerfile sets the entrypoint to "tail -f /dev/null".
# This is a common practice in Dockerfiles for creating a container that runs indefinitely without executing any commands.
# The purpose of this is to keep the container running so that it can be used as a base image or as a placeholder for other services.

FROM ubuntu:24.04
# MATLAB
# FROM containers.mathworks.com/matlab-runtime:r2024b

# Environment variables
ENV WORKDIR=${WORKDIR:-/workspaces/devcontainer_template}

# Environment variables. MATLAB
# ENV DEBIAN_FRONTEND=noninteractive
# ENV MATLAB_VERSION=R2024b
# ENV AGREE_TO_MATLAB_RUNTIME_LICENSE=yes
# # Set matlab runtime environment variables
# ENV MR=/opt/matlabruntime/${MATLAB_VERSION}
# ENV LD_LIBRARY_PATH=$LD_LIBRARY_PATH:\
# $MR/runtime/glnxa64:\
# $MR/bin/glnxa64:\
# $MR/sys/os/glnxa64:\
# $MR/sys/opengl/lib/glnxa64

# Environment variables. uv
ENV UV_PROJECT_ENVIRONMENT=/venvs

WORKDIR $WORKDIR

# Install necessary packages
RUN apt-get update && apt-get install -y \
    build-essential \
    curl \
    git \
    python3 \
    python3-venv \
    xclip \
    micro \
    wget \
    unzip \
    btop

# Kaleido dependencies (plotly static image export generation)
RUN apt-get install -y \
    libnss3 \
    libatk-bridge2.0-0 \
    libcups2 \
    libxcomposite1 \
    libxdamage1 \
    libxfixes3 \
    libxrandr2 \
    libgbm1 \
    libxkbcommon0 \
    libpango-1.0-0 \
    libcairo2 \
    libasound2t64

# Install zsh, oh-my-zsh with customized theme and plugins (git, ssh-agent, zsh-autosuggestions, zsh-syntax-highlighting)
RUN sh -c "$(wget -O- https://github.com/deluan/zsh-in-docker/releases/download/v1.2.0/zsh-in-docker.sh)" -- \
    -t https://github.com/denysdovhan/spaceship-prompt \
    -a 'SPACESHIP_PROMPT_ADD_NEWLINE="false"' \
    -a 'SPACESHIP_PROMPT_SEPARATE_LINE="false"' \
    -p git \
    -p ssh-agent \
    -p https://github.com/zsh-users/zsh-autosuggestions \
    -p https://github.com/zsh-users/zsh-syntax-highlighting

# Python
# Install uv
# COPY --from=ghcr.io/astral-sh/uv:0.7.9 /uv /bin/uv
# RUN uv --version
# Alternative if it fails
# ADD https://astral.sh/uv/install.sh /uv-installer.sh
# RUN sh /uv-installer.sh && rm /uv-installer.sh
# ENV PATH="/root/.local/bin/bin/:$PATH"

# Install conda
# Create the directory for Miniconda
# RUN mkdir -p /miniconda3
# Download the Miniconda installer
# RUN wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh -O /miniconda3/miniconda.sh
# Install Miniconda
# RUN bash /miniconda3/miniconda.sh -b -u -p /miniconda3
# Remove the Miniconda installer
# RUN rm /miniconda3/miniconda.sh
# Add Miniconda to the PATH
# ENV PATH="/miniconda3/bin:$PATH"

# Set up virtual environment
COPY ./README.md ./pyproject.toml ./uv.lock* $WORKDIR
RUN uv sync

# Install Chrome for Plotly static image generation
RUN /venvs/bin/python -c "import subprocess; subprocess.run(['plotly_get_chrome'], input='y\n', text=True, check=True)" || \
    echo "y" | /venvs/bin/plotly_get_chrome
